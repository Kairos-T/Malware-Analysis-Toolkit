import pefile
import pyrebox
import os
import hashlib


def calculate_file_hash(file_path):
    with open(file_path, "rb") as file:
        content = file.read()
        md5_hash = hashlib.md5(content).hexdigest()
        sha1_hash = hashlib.sha1(content).hexdigest()
        sha256_hash = hashlib.sha256(content).hexdigest()

    print("---------- File Hashes ----------")
    print("MD5:", md5_hash)
    print("SHA1:", sha1_hash)
    print("SHA256:", sha256_hash)


def static_analysis(file_path):
    pe = pefile.PE(file_path)

    print("---------- Static Analysis ----------")
    print("File:", file_path)
    print("ImageBase:", hex(pe.OPTIONAL_HEADER.ImageBase))
    print("Entry Point:", hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
    print("Number of Sections:", pe.FILE_HEADER.NumberOfSections)
    print("Sections:")
    for section in pe.sections:
        print("-", section.Name.decode().rstrip('\x00'))

    # Extract and print imported functions
    print("\n---------- Imported Functions ----------")
    if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            print(f"{entry.dll.decode()}:")
            for imp in entry.imports:
                if imp.name:
                    print("-", imp.name.decode())
                else:
                    print("-", hex(imp.address))
    else:
        print("No imported functions found.")


def on_net_event(vm, conn_id, event_type, local_ip, local_port, remote_ip, remote_port, data):
    print(f"[+] Network Event: {event_type}")
    print("Local IP:", local_ip)
    print("Local Port:", local_port)
    print("Remote IP:", remote_ip)
    print("Remote Port:", remote_port)
    if data:
        print("Data:", data.decode())


def dynamic_analysis(file_path):
    vm = pyrebox.PyreboxVM()

    def on_instr(vm, address, size, mnemonic, op_str):
        print(f"[+] Instruction: {mnemonic} {op_str}")

    def on_mem_access(vm, access, virt_addr, phys_addr, size, data):
        if access == pyrebox.MEM_WRITE:
            print(f"[+] Memory Write: Address={hex(virt_addr)} Size={size} Data={data.hex()}")
        elif access == pyrebox.MEM_READ:
            print(f"[+] Memory Read: Address={hex(virt_addr)} Size={size} Data={data.hex()}")

    vm.add_instr_cb(on_instr)
    vm.add_mem_cb(on_mem_access)
    vm.add_net_cb(on_net_event)

    vm.load_module(file_path, as_main=True)
    vm.run()


def malware_analysis():
    try:
        file_dir = input("Enter the directory of the file to analyze: ")
        file_path = os.path.abspath(fr"{file_dir}")

        if not os.path.isfile(file_path):
            raise FileNotFoundError(f"Error: File not found at {file_path}")

        static_analysis(file_path)
        dynamic_analysis(file_path)
        calculate_file_hash(file_path)

    except FileNotFoundError as e:
        print(e)
    except Exception as e:
        print("An error occurred:", str(e))


malware_analysis()
