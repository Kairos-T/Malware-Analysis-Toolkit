import pefile
#import pyrebox
import os

# Static Analysis of Malware Sample
def static_analysis(file_path):
    pe = pefile.PE(file_path)

    print("---------- Static Analysis ----------")
    print("File:", file_path)
    print("ImageBase:", hex(pe.OPTIONAL_HEADER.ImageBase))
    print("Entry Point:", hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
    print("Number of Sections:", pe.FILE_HEADER.NumberOfSections)
    print("Sections:")
    for section in pe.sections:
        print("-", section.Name.decode().rstrip('\x00'))


     # Extract and print imported functions
    print("\n---------- Imported Functions----------")
    if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            print(f"{entry.dll.decode()}:")
            for imp in entry.imports:
                if imp.name:
                    print("-", imp.name.decode())
                else:
                    print("-", hex(imp.address))
    else:
        print("No imported functions found.")

# Dynamic Analysis of Malware Sample
def dynamic_analysis(file_path):
    #vm = pyrebox.PyreboxVM()
    pass

def malware_analysis():
    try:
        file_dir = input("Enter the directory of the file to analyse: ")
        file_path = os.path.abspath(r"{}".format(file_dir))


        if not os.path.isfile(file_path):
            print("Error: File not found.")
            raise FileNotFoundError

        static_analysis(file_path)
        dynamic_analysis(file_path)

    except FileNotFoundError:
        print("Error: File not found.")
    except Exception as e:
        print("An error occurred:", str(e))

malware_analysis()


